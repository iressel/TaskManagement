// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.Infrastructure.Context;

#nullable disable

namespace TaskManagement.Infrastructure.Migrations
{
    [DbContext(typeof(TaskManagementDbContext))]
    [Migration("20231221174106_AddingTestData")]
    partial class AddingTestData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1adb17aa-7db1-460e-8f69-44579d953ce3"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6121),
                            IsDeleted = "0",
                            Name = "PAM",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6140)
                        },
                        new
                        {
                            Id = new Guid("1652d695-5e40-4c97-bd4f-12c6b0d2e9b6"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6330),
                            IsDeleted = "0",
                            Name = "DBA",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6333)
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellPhone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CuitCuil")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Legajo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("506cf03a-0144-4c8c-83b7-178578c7f463"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6187),
                            DateOfBirth = new DateTime(1991, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("1adb17aa-7db1-460e-8f69-44579d953ce3"),
                            DocumentNumber = "36192398",
                            Email = "i.ressel@ptytechnologies.com",
                            EnrollmentDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = "0",
                            Name = "ISMAIN",
                            Surname = "RESSEL",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6191)
                        },
                        new
                        {
                            Id = new Guid("06123412-36eb-43d7-b21b-a0ef4b41b810"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6348),
                            DateOfBirth = new DateTime(1991, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("1652d695-5e40-4c97-bd4f-12c6b0d2e9b6"),
                            DocumentNumber = "36185222",
                            Email = "g.prado@ptytechnologies.com",
                            EnrollmentDate = new DateTime(2020, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = "0",
                            Name = "GONZALO",
                            Surname = "PRADO",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6350)
                        },
                        new
                        {
                            Id = new Guid("9c126fe9-77bf-43d1-a91a-5c8a8e1ffb05"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6380),
                            DateOfBirth = new DateTime(1994, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("1652d695-5e40-4c97-bd4f-12c6b0d2e9b6"),
                            DocumentNumber = "38111222",
                            Email = "c.guelpa@ptytechnologies.com",
                            EnrollmentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = "0",
                            Name = "CARLA",
                            Surname = "GUELPA",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6381)
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Subtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90fb2cf2-c68c-4d4f-b075-3c4507d5dae1"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6258),
                            DeliveryDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Implementar Customer Emails",
                            EmployeeId = new Guid("506cf03a-0144-4c8c-83b7-178578c7f463"),
                            IsDeleted = "0",
                            Status = 5,
                            Title = "PSS-1",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6259)
                        },
                        new
                        {
                            Id = new Guid("c81e53d2-c871-4be5-95fc-90d5c6a3c327"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6274),
                            DeliveryDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explicar EF",
                            EmployeeId = new Guid("506cf03a-0144-4c8c-83b7-178578c7f463"),
                            IsDeleted = "0",
                            Status = 1,
                            Title = "PSS-2",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6275)
                        },
                        new
                        {
                            Id = new Guid("b59c5fea-6ca6-43ac-ab62-22cf22787e40"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6408),
                            DeliveryDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soporte a PSS",
                            EmployeeId = new Guid("06123412-36eb-43d7-b21b-a0ef4b41b810"),
                            IsDeleted = "0",
                            Status = 5,
                            Title = "DBA-1",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6409)
                        },
                        new
                        {
                            Id = new Guid("b04c7065-78f1-4fe8-8ff6-332f4dd66766"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6421),
                            DeliveryDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soporte a Cashier",
                            EmployeeId = new Guid("06123412-36eb-43d7-b21b-a0ef4b41b810"),
                            IsDeleted = "0",
                            Status = 1,
                            Title = "DBA-2",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6423)
                        },
                        new
                        {
                            Id = new Guid("47b389d5-36c7-47b5-8d18-529cac33a669"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6434),
                            DeliveryDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soporte a PSS",
                            EmployeeId = new Guid("9c126fe9-77bf-43d1-a91a-5c8a8e1ffb05"),
                            IsDeleted = "0",
                            Status = 5,
                            Title = "DBA-3",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6435)
                        },
                        new
                        {
                            Id = new Guid("8acdc7ab-6493-45f7-a0c0-a357e90a9312"),
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6451),
                            DeliveryDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Soporte a PSS",
                            EmployeeId = new Guid("9c126fe9-77bf-43d1-a91a-5c8a8e1ffb05"),
                            IsDeleted = "0",
                            Status = 1,
                            Title = "DBA-4",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6452)
                        });
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.PersonAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("DepartmentLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("IsOnTheGroundFloor")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33014007-9025-4275-bdb3-90965ffe3c49"),
                            AddressNumber = "1440",
                            City = "La Plata",
                            Country = "Argentina",
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6216),
                            DepartmentLetter = "A",
                            DepartmentNumber = "2",
                            DetailedAddress = "Calle 16 1440 e/ 61 y 62 2A",
                            EmployeeId = new Guid("506cf03a-0144-4c8c-83b7-178578c7f463"),
                            IsDeleted = "0",
                            IsOnTheGroundFloor = false,
                            State = "BA",
                            Street = "16",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6217),
                            ZipCode = "1900"
                        },
                        new
                        {
                            Id = new Guid("11c7d99a-f09a-4497-8b2a-6844ac88ab25"),
                            AddressNumber = "225",
                            City = "Carmen de Patagones",
                            Country = "Argentina",
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6236),
                            DetailedAddress = "Harosteguy 225, Casa",
                            EmployeeId = new Guid("506cf03a-0144-4c8c-83b7-178578c7f463"),
                            IsDeleted = "0",
                            IsOnTheGroundFloor = true,
                            State = "BA",
                            Street = "Harosteguy",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6237),
                            ZipCode = "8504"
                        },
                        new
                        {
                            Id = new Guid("af04a8b0-3ffb-4020-b6f1-c7190409ec67"),
                            AddressNumber = "1953",
                            City = "Mendoza",
                            Country = "Argentina",
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6365),
                            DetailedAddress = "Perón 1953, casa",
                            EmployeeId = new Guid("06123412-36eb-43d7-b21b-a0ef4b41b810"),
                            IsDeleted = "0",
                            IsOnTheGroundFloor = true,
                            State = "MZA",
                            Street = "Perón",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6366),
                            ZipCode = "M5500"
                        },
                        new
                        {
                            Id = new Guid("4a8c10ad-39ad-416d-8c3b-040bc4aab405"),
                            AddressNumber = "442",
                            City = "Buenos Aires",
                            Country = "Argentina",
                            CreatedBy = "iressel",
                            CreatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6393),
                            DepartmentLetter = "B",
                            DepartmentNumber = "7",
                            DetailedAddress = "Alem 442 7B",
                            EmployeeId = new Guid("9c126fe9-77bf-43d1-a91a-5c8a8e1ffb05"),
                            IsDeleted = "0",
                            IsOnTheGroundFloor = false,
                            State = "BA",
                            Street = "ALEM",
                            UpdatedBy = "iressel",
                            UpdatedDate = new DateTime(2023, 12, 21, 14, 41, 6, 244, DateTimeKind.Local).AddTicks(6394),
                            ZipCode = "B1228"
                        });
                });

            modelBuilder.Entity("TaskManagement.Infrastructure.Context.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Flgeli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagement.Infrastructure.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagement.Infrastructure.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagement.Infrastructure.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagement.Infrastructure.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Comment", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregates.DepartmentAggregate.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Employee", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregates.DepartmentAggregate.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Subtask", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregates.DepartmentAggregate.Ticket", "Ticket")
                        .WithMany("Subtasks")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Ticket", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregates.DepartmentAggregate.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.PersonAggregate.Address", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregates.DepartmentAggregate.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregates.DepartmentAggregate.Ticket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Subtasks");
                });
#pragma warning restore 612, 618
        }
    }
}
